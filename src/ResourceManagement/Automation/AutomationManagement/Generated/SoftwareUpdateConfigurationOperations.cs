// 
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 

// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Xml;
using Hyak.Common;
using Hyak.Common.Internals;
using Microsoft.Azure;
using Microsoft.Azure.Management.Automation;
using Microsoft.Azure.Management.Automation.Models;
using Newtonsoft.Json.Linq;

namespace Microsoft.Azure.Management.Automation
{
    /// <summary>
    /// Service operation for automation variables.  (see
    /// http://aka.ms/azureautomationsdk/variableoperations for more
    /// information)
    /// </summary>
    internal partial class SoftwareUpdateConfigurationOperations : IServiceOperations<AutomationManagementClient>, ISoftwareUpdateConfigurationOperations
    {
        /// <summary>
        /// Initializes a new instance of the
        /// SoftwareUpdateConfigurationOperations class.
        /// </summary>
        /// <param name='client'>
        /// Reference to the service client.
        /// </param>
        internal SoftwareUpdateConfigurationOperations(AutomationManagementClient client)
        {
            this._client = client;
        }
        
        private AutomationManagementClient _client;
        
        /// <summary>
        /// Gets a reference to the
        /// Microsoft.Azure.Management.Automation.AutomationManagementClient.
        /// </summary>
        public AutomationManagementClient Client
        {
            get { return this._client; }
        }
        
        /// <summary>
        /// Create a softwareUpdateConfigurations.  (see
        /// http://aka.ms/azureautomationsdk/softwareUpdateConfigurationOperations
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='parameters'>
        /// Required. The parameters supplied to the create or update of
        /// software update configuration operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the create or software update configuration
        /// operation.
        /// </returns>
        public async Task<SoftwareUpdateConfigurationCreateOrUpdateResponse> CreateOrUpdateAsync(string resourceGroupName, string automationAccount, SoftwareUpdateConfigurationCreateOrUpdateParameters parameters, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (parameters == null)
            {
                throw new ArgumentNullException("parameters");
            }
            if (parameters.Name == null)
            {
                throw new ArgumentNullException("parameters.Name");
            }
            if (parameters.Properties == null)
            {
                throw new ArgumentNullException("parameters.Properties");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("parameters", parameters);
                TracingAdapter.Enter(invocationId, this, "CreateOrUpdateAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/softwareUpdateConfigurations/";
            url = url + Uri.EscapeDataString(parameters.Name);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2017-05-15-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Put;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Serialize Request
                string requestContent = null;
                JToken requestDoc = null;
                
                JObject softwareUpdateConfigurationCreateOrUpdateParametersValue = new JObject();
                requestDoc = softwareUpdateConfigurationCreateOrUpdateParametersValue;
                
                softwareUpdateConfigurationCreateOrUpdateParametersValue["name"] = parameters.Name;
                
                JObject propertiesValue = new JObject();
                softwareUpdateConfigurationCreateOrUpdateParametersValue["properties"] = propertiesValue;
                
                if (parameters.Properties.ScheduleProperties != null)
                {
                    JObject scheduleInfoValue = new JObject();
                    propertiesValue["scheduleInfo"] = scheduleInfoValue;
                    
                    scheduleInfoValue["startTime"] = parameters.Properties.ScheduleProperties.StartTime;
                    
                    scheduleInfoValue["startTimeOffsetMinutes"] = parameters.Properties.ScheduleProperties.StartTimeOffsetMinutes;
                    
                    scheduleInfoValue["expiryTime"] = parameters.Properties.ScheduleProperties.ExpiryTime;
                    
                    scheduleInfoValue["expiryTimeOffsetMinutes"] = parameters.Properties.ScheduleProperties.ExpiryTimeOffsetMinutes;
                    
                    scheduleInfoValue["isEnabled"] = parameters.Properties.ScheduleProperties.IsEnabled;
                    
                    if (parameters.Properties.ScheduleProperties.NextRun != null)
                    {
                        scheduleInfoValue["nextRun"] = parameters.Properties.ScheduleProperties.NextRun.Value;
                    }
                    
                    scheduleInfoValue["nextRunOffsetMinutes"] = parameters.Properties.ScheduleProperties.NextRunOffsetMinutes;
                    
                    if (parameters.Properties.ScheduleProperties.Interval != null)
                    {
                        scheduleInfoValue["interval"] = parameters.Properties.ScheduleProperties.Interval.Value;
                    }
                    
                    if (parameters.Properties.ScheduleProperties.Frequency != null)
                    {
                        scheduleInfoValue["frequency"] = parameters.Properties.ScheduleProperties.Frequency;
                    }
                    
                    if (parameters.Properties.ScheduleProperties.TimeZone != null)
                    {
                        scheduleInfoValue["timeZone"] = parameters.Properties.ScheduleProperties.TimeZone;
                    }
                    
                    if (parameters.Properties.ScheduleProperties.AdvancedSchedule != null)
                    {
                        JObject advancedScheduleValue = new JObject();
                        scheduleInfoValue["advancedSchedule"] = advancedScheduleValue;
                        
                        if (parameters.Properties.ScheduleProperties.AdvancedSchedule.WeekDays != null)
                        {
                            if (parameters.Properties.ScheduleProperties.AdvancedSchedule.WeekDays is ILazyCollection == false || ((ILazyCollection)parameters.Properties.ScheduleProperties.AdvancedSchedule.WeekDays).IsInitialized)
                            {
                                JArray weekDaysArray = new JArray();
                                foreach (string weekDaysItem in parameters.Properties.ScheduleProperties.AdvancedSchedule.WeekDays)
                                {
                                    weekDaysArray.Add(weekDaysItem);
                                }
                                advancedScheduleValue["weekDays"] = weekDaysArray;
                            }
                        }
                        
                        if (parameters.Properties.ScheduleProperties.AdvancedSchedule.MonthDays != null)
                        {
                            if (parameters.Properties.ScheduleProperties.AdvancedSchedule.MonthDays is ILazyCollection == false || ((ILazyCollection)parameters.Properties.ScheduleProperties.AdvancedSchedule.MonthDays).IsInitialized)
                            {
                                JArray monthDaysArray = new JArray();
                                foreach (int monthDaysItem in parameters.Properties.ScheduleProperties.AdvancedSchedule.MonthDays)
                                {
                                    monthDaysArray.Add(monthDaysItem);
                                }
                                advancedScheduleValue["monthDays"] = monthDaysArray;
                            }
                        }
                        
                        if (parameters.Properties.ScheduleProperties.AdvancedSchedule.MonthlyOccurrences != null)
                        {
                            if (parameters.Properties.ScheduleProperties.AdvancedSchedule.MonthlyOccurrences is ILazyCollection == false || ((ILazyCollection)parameters.Properties.ScheduleProperties.AdvancedSchedule.MonthlyOccurrences).IsInitialized)
                            {
                                JArray monthlyOccurrencesArray = new JArray();
                                foreach (AdvancedScheduleMonthlyOccurrence monthlyOccurrencesItem in parameters.Properties.ScheduleProperties.AdvancedSchedule.MonthlyOccurrences)
                                {
                                    JObject advancedScheduleMonthlyOccurrenceValue = new JObject();
                                    monthlyOccurrencesArray.Add(advancedScheduleMonthlyOccurrenceValue);
                                    
                                    if (monthlyOccurrencesItem.Occurrence != null)
                                    {
                                        advancedScheduleMonthlyOccurrenceValue["occurrence"] = monthlyOccurrencesItem.Occurrence.Value;
                                    }
                                    
                                    if (monthlyOccurrencesItem.Day != null)
                                    {
                                        advancedScheduleMonthlyOccurrenceValue["day"] = monthlyOccurrencesItem.Day;
                                    }
                                }
                                advancedScheduleValue["monthlyOccurrences"] = monthlyOccurrencesArray;
                            }
                        }
                    }
                    
                    scheduleInfoValue["creationTime"] = parameters.Properties.ScheduleProperties.CreationTime;
                    
                    scheduleInfoValue["lastModifiedTime"] = parameters.Properties.ScheduleProperties.LastModifiedTime;
                    
                    if (parameters.Properties.ScheduleProperties.Description != null)
                    {
                        scheduleInfoValue["description"] = parameters.Properties.ScheduleProperties.Description;
                    }
                }
                
                if (parameters.Properties.UpdateConfiguration != null)
                {
                    JObject updateConfigurationValue = new JObject();
                    propertiesValue["updateConfiguration"] = updateConfigurationValue;
                    
                    if (parameters.Properties.UpdateConfiguration.OperatingSystem != null)
                    {
                        updateConfigurationValue["operatingSystem"] = parameters.Properties.UpdateConfiguration.OperatingSystem;
                    }
                    
                    if (parameters.Properties.UpdateConfiguration.Duration != null)
                    {
                        updateConfigurationValue["duration"] = XmlConvert.ToString(parameters.Properties.UpdateConfiguration.Duration.Value);
                    }
                    
                    if (parameters.Properties.UpdateConfiguration.AzureVirtualMachines != null)
                    {
                        if (parameters.Properties.UpdateConfiguration.AzureVirtualMachines is ILazyCollection == false || ((ILazyCollection)parameters.Properties.UpdateConfiguration.AzureVirtualMachines).IsInitialized)
                        {
                            JArray azureVirtualMachinesArray = new JArray();
                            foreach (string azureVirtualMachinesItem in parameters.Properties.UpdateConfiguration.AzureVirtualMachines)
                            {
                                azureVirtualMachinesArray.Add(azureVirtualMachinesItem);
                            }
                            updateConfigurationValue["azureVirtualMachines"] = azureVirtualMachinesArray;
                        }
                    }
                    
                    if (parameters.Properties.UpdateConfiguration.NonAzureComputerNames != null)
                    {
                        if (parameters.Properties.UpdateConfiguration.NonAzureComputerNames is ILazyCollection == false || ((ILazyCollection)parameters.Properties.UpdateConfiguration.NonAzureComputerNames).IsInitialized)
                        {
                            JArray nonAzureComputerNamesArray = new JArray();
                            foreach (string nonAzureComputerNamesItem in parameters.Properties.UpdateConfiguration.NonAzureComputerNames)
                            {
                                nonAzureComputerNamesArray.Add(nonAzureComputerNamesItem);
                            }
                            updateConfigurationValue["nonAzureComputerNames"] = nonAzureComputerNamesArray;
                        }
                    }
                    
                    if (parameters.Properties.UpdateConfiguration.Windows != null)
                    {
                        JObject windowsValue = new JObject();
                        updateConfigurationValue["windows"] = windowsValue;
                        
                        if (parameters.Properties.UpdateConfiguration.Windows.IncludedUpdateClassifications != null)
                        {
                            windowsValue["includedUpdateClassifications"] = parameters.Properties.UpdateConfiguration.Windows.IncludedUpdateClassifications;
                        }
                        
                        if (parameters.Properties.UpdateConfiguration.Windows.ExcludedKbNumbers != null)
                        {
                            if (parameters.Properties.UpdateConfiguration.Windows.ExcludedKbNumbers is ILazyCollection == false || ((ILazyCollection)parameters.Properties.UpdateConfiguration.Windows.ExcludedKbNumbers).IsInitialized)
                            {
                                JArray excludedKbNumbersArray = new JArray();
                                foreach (string excludedKbNumbersItem in parameters.Properties.UpdateConfiguration.Windows.ExcludedKbNumbers)
                                {
                                    excludedKbNumbersArray.Add(excludedKbNumbersItem);
                                }
                                windowsValue["excludedKbNumbers"] = excludedKbNumbersArray;
                            }
                        }
                    }
                    
                    if (parameters.Properties.UpdateConfiguration.Linux != null)
                    {
                        JObject linuxValue = new JObject();
                        updateConfigurationValue["linux"] = linuxValue;
                        
                        if (parameters.Properties.UpdateConfiguration.Linux.IncludedPackageClassifications != null)
                        {
                            linuxValue["includedPackageClassifications"] = parameters.Properties.UpdateConfiguration.Linux.IncludedPackageClassifications;
                        }
                        
                        if (parameters.Properties.UpdateConfiguration.Linux.ExcludedPackageNameMasks != null)
                        {
                            if (parameters.Properties.UpdateConfiguration.Linux.ExcludedPackageNameMasks is ILazyCollection == false || ((ILazyCollection)parameters.Properties.UpdateConfiguration.Linux.ExcludedPackageNameMasks).IsInitialized)
                            {
                                JArray excludedPackageNameMasksArray = new JArray();
                                foreach (string excludedPackageNameMasksItem in parameters.Properties.UpdateConfiguration.Linux.ExcludedPackageNameMasks)
                                {
                                    excludedPackageNameMasksArray.Add(excludedPackageNameMasksItem);
                                }
                                linuxValue["excludedPackageNameMasks"] = excludedPackageNameMasksArray;
                            }
                        }
                    }
                }
                
                requestContent = requestDoc.ToString(Newtonsoft.Json.Formatting.Indented);
                httpRequest.Content = new StringContent(requestContent, Encoding.UTF8);
                httpRequest.Content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK && statusCode != HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, requestContent, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SoftwareUpdateConfigurationCreateOrUpdateResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK || statusCode == HttpStatusCode.Created)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SoftwareUpdateConfigurationCreateOrUpdateResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            SoftwareUpdateConfiguration softwareUpdateConfigurationInstance = new SoftwareUpdateConfiguration();
                            result.SoftwareUpdateConfiguration = softwareUpdateConfigurationInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                softwareUpdateConfigurationInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                softwareUpdateConfigurationInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue2 = responseDoc["properties"];
                            if (propertiesValue2 != null && propertiesValue2.Type != JTokenType.Null)
                            {
                                SoftwareUpdateConfigurationProperties propertiesInstance = new SoftwareUpdateConfigurationProperties();
                                softwareUpdateConfigurationInstance.Properties = propertiesInstance;
                                
                                JToken scheduleInfoValue2 = propertiesValue2["scheduleInfo"];
                                if (scheduleInfoValue2 != null && scheduleInfoValue2.Type != JTokenType.Null)
                                {
                                    ScheduleProperties scheduleInfoInstance = new ScheduleProperties();
                                    propertiesInstance.ScheduleProperties = scheduleInfoInstance;
                                    
                                    JToken startTimeValue = scheduleInfoValue2["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                        scheduleInfoInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken startTimeOffsetMinutesValue = scheduleInfoValue2["startTimeOffsetMinutes"];
                                    if (startTimeOffsetMinutesValue != null && startTimeOffsetMinutesValue.Type != JTokenType.Null)
                                    {
                                        double startTimeOffsetMinutesInstance = ((double)startTimeOffsetMinutesValue);
                                        scheduleInfoInstance.StartTimeOffsetMinutes = startTimeOffsetMinutesInstance;
                                    }
                                    
                                    JToken expiryTimeValue = scheduleInfoValue2["expiryTime"];
                                    if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset expiryTimeInstance = ((DateTimeOffset)expiryTimeValue);
                                        scheduleInfoInstance.ExpiryTime = expiryTimeInstance;
                                    }
                                    
                                    JToken expiryTimeOffsetMinutesValue = scheduleInfoValue2["expiryTimeOffsetMinutes"];
                                    if (expiryTimeOffsetMinutesValue != null && expiryTimeOffsetMinutesValue.Type != JTokenType.Null)
                                    {
                                        double expiryTimeOffsetMinutesInstance = ((double)expiryTimeOffsetMinutesValue);
                                        scheduleInfoInstance.ExpiryTimeOffsetMinutes = expiryTimeOffsetMinutesInstance;
                                    }
                                    
                                    JToken isEnabledValue = scheduleInfoValue2["isEnabled"];
                                    if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool isEnabledInstance = ((bool)isEnabledValue);
                                        scheduleInfoInstance.IsEnabled = isEnabledInstance;
                                    }
                                    
                                    JToken nextRunValue = scheduleInfoValue2["nextRun"];
                                    if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset nextRunInstance = ((DateTimeOffset)nextRunValue);
                                        scheduleInfoInstance.NextRun = nextRunInstance;
                                    }
                                    
                                    JToken nextRunOffsetMinutesValue = scheduleInfoValue2["nextRunOffsetMinutes"];
                                    if (nextRunOffsetMinutesValue != null && nextRunOffsetMinutesValue.Type != JTokenType.Null)
                                    {
                                        double nextRunOffsetMinutesInstance = ((double)nextRunOffsetMinutesValue);
                                        scheduleInfoInstance.NextRunOffsetMinutes = nextRunOffsetMinutesInstance;
                                    }
                                    
                                    JToken intervalValue = scheduleInfoValue2["interval"];
                                    if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                    {
                                        byte intervalInstance = ((byte)intervalValue);
                                        scheduleInfoInstance.Interval = intervalInstance;
                                    }
                                    
                                    JToken frequencyValue = scheduleInfoValue2["frequency"];
                                    if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                    {
                                        string frequencyInstance = ((string)frequencyValue);
                                        scheduleInfoInstance.Frequency = frequencyInstance;
                                    }
                                    
                                    JToken timeZoneValue = scheduleInfoValue2["timeZone"];
                                    if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                    {
                                        string timeZoneInstance = ((string)timeZoneValue);
                                        scheduleInfoInstance.TimeZone = timeZoneInstance;
                                    }
                                    
                                    JToken advancedScheduleValue2 = scheduleInfoValue2["advancedSchedule"];
                                    if (advancedScheduleValue2 != null && advancedScheduleValue2.Type != JTokenType.Null)
                                    {
                                        AdvancedSchedule advancedScheduleInstance = new AdvancedSchedule();
                                        scheduleInfoInstance.AdvancedSchedule = advancedScheduleInstance;
                                        
                                        JToken weekDaysArray2 = advancedScheduleValue2["weekDays"];
                                        if (weekDaysArray2 != null && weekDaysArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken weekDaysValue in ((JArray)weekDaysArray2))
                                            {
                                                advancedScheduleInstance.WeekDays.Add(((string)weekDaysValue));
                                            }
                                        }
                                        
                                        JToken monthDaysArray2 = advancedScheduleValue2["monthDays"];
                                        if (monthDaysArray2 != null && monthDaysArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken monthDaysValue in ((JArray)monthDaysArray2))
                                            {
                                                advancedScheduleInstance.MonthDays.Add(((int)monthDaysValue));
                                            }
                                        }
                                        
                                        JToken monthlyOccurrencesArray2 = advancedScheduleValue2["monthlyOccurrences"];
                                        if (monthlyOccurrencesArray2 != null && monthlyOccurrencesArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken monthlyOccurrencesValue in ((JArray)monthlyOccurrencesArray2))
                                            {
                                                AdvancedScheduleMonthlyOccurrence advancedScheduleMonthlyOccurrenceInstance = new AdvancedScheduleMonthlyOccurrence();
                                                advancedScheduleInstance.MonthlyOccurrences.Add(advancedScheduleMonthlyOccurrenceInstance);
                                                
                                                JToken occurrenceValue = monthlyOccurrencesValue["occurrence"];
                                                if (occurrenceValue != null && occurrenceValue.Type != JTokenType.Null)
                                                {
                                                    int occurrenceInstance = ((int)occurrenceValue);
                                                    advancedScheduleMonthlyOccurrenceInstance.Occurrence = occurrenceInstance;
                                                }
                                                
                                                JToken dayValue = monthlyOccurrencesValue["day"];
                                                if (dayValue != null && dayValue.Type != JTokenType.Null)
                                                {
                                                    string dayInstance = ((string)dayValue);
                                                    advancedScheduleMonthlyOccurrenceInstance.Day = dayInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken creationTimeValue = scheduleInfoValue2["creationTime"];
                                    if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                        scheduleInfoInstance.CreationTime = creationTimeInstance;
                                    }
                                    
                                    JToken lastModifiedTimeValue = scheduleInfoValue2["lastModifiedTime"];
                                    if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                        scheduleInfoInstance.LastModifiedTime = lastModifiedTimeInstance;
                                    }
                                    
                                    JToken descriptionValue = scheduleInfoValue2["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        scheduleInfoInstance.Description = descriptionInstance;
                                    }
                                }
                                
                                JToken updateConfigurationValue2 = propertiesValue2["updateConfiguration"];
                                if (updateConfigurationValue2 != null && updateConfigurationValue2.Type != JTokenType.Null)
                                {
                                    UpdateConfiguration updateConfigurationInstance = new UpdateConfiguration();
                                    propertiesInstance.UpdateConfiguration = updateConfigurationInstance;
                                    
                                    JToken operatingSystemValue = updateConfigurationValue2["operatingSystem"];
                                    if (operatingSystemValue != null && operatingSystemValue.Type != JTokenType.Null)
                                    {
                                        string operatingSystemInstance = ((string)operatingSystemValue);
                                        updateConfigurationInstance.OperatingSystem = operatingSystemInstance;
                                    }
                                    
                                    JToken durationValue = updateConfigurationValue2["duration"];
                                    if (durationValue != null && durationValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                        updateConfigurationInstance.Duration = durationInstance;
                                    }
                                    
                                    JToken azureVirtualMachinesArray2 = updateConfigurationValue2["azureVirtualMachines"];
                                    if (azureVirtualMachinesArray2 != null && azureVirtualMachinesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken azureVirtualMachinesValue in ((JArray)azureVirtualMachinesArray2))
                                        {
                                            updateConfigurationInstance.AzureVirtualMachines.Add(((string)azureVirtualMachinesValue));
                                        }
                                    }
                                    
                                    JToken nonAzureComputerNamesArray2 = updateConfigurationValue2["nonAzureComputerNames"];
                                    if (nonAzureComputerNamesArray2 != null && nonAzureComputerNamesArray2.Type != JTokenType.Null)
                                    {
                                        foreach (JToken nonAzureComputerNamesValue in ((JArray)nonAzureComputerNamesArray2))
                                        {
                                            updateConfigurationInstance.NonAzureComputerNames.Add(((string)nonAzureComputerNamesValue));
                                        }
                                    }
                                    
                                    JToken windowsValue2 = updateConfigurationValue2["windows"];
                                    if (windowsValue2 != null && windowsValue2.Type != JTokenType.Null)
                                    {
                                        WindowsConfiguration windowsInstance = new WindowsConfiguration();
                                        updateConfigurationInstance.Windows = windowsInstance;
                                        
                                        JToken includedUpdateClassificationsValue = windowsValue2["includedUpdateClassifications"];
                                        if (includedUpdateClassificationsValue != null && includedUpdateClassificationsValue.Type != JTokenType.Null)
                                        {
                                            string includedUpdateClassificationsInstance = ((string)includedUpdateClassificationsValue);
                                            windowsInstance.IncludedUpdateClassifications = includedUpdateClassificationsInstance;
                                        }
                                        
                                        JToken excludedKbNumbersArray2 = windowsValue2["excludedKbNumbers"];
                                        if (excludedKbNumbersArray2 != null && excludedKbNumbersArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken excludedKbNumbersValue in ((JArray)excludedKbNumbersArray2))
                                            {
                                                windowsInstance.ExcludedKbNumbers.Add(((string)excludedKbNumbersValue));
                                            }
                                        }
                                    }
                                    
                                    JToken linuxValue2 = updateConfigurationValue2["linux"];
                                    if (linuxValue2 != null && linuxValue2.Type != JTokenType.Null)
                                    {
                                        LinuxConfiguration linuxInstance = new LinuxConfiguration();
                                        updateConfigurationInstance.Linux = linuxInstance;
                                        
                                        JToken includedPackageClassificationsValue = linuxValue2["includedPackageClassifications"];
                                        if (includedPackageClassificationsValue != null && includedPackageClassificationsValue.Type != JTokenType.Null)
                                        {
                                            string includedPackageClassificationsInstance = ((string)includedPackageClassificationsValue);
                                            linuxInstance.IncludedPackageClassifications = includedPackageClassificationsInstance;
                                        }
                                        
                                        JToken excludedPackageNameMasksArray2 = linuxValue2["excludedPackageNameMasks"];
                                        if (excludedPackageNameMasksArray2 != null && excludedPackageNameMasksArray2.Type != JTokenType.Null)
                                        {
                                            foreach (JToken excludedPackageNameMasksValue in ((JArray)excludedPackageNameMasksArray2))
                                            {
                                                linuxInstance.ExcludedPackageNameMasks.Add(((string)excludedPackageNameMasksValue));
                                            }
                                        }
                                    }
                                }
                                
                                JToken lastModifiedByValue = propertiesValue2["lastModifiedBy"];
                                if (lastModifiedByValue != null && lastModifiedByValue.Type != JTokenType.Null)
                                {
                                    string lastModifiedByInstance = ((string)lastModifiedByValue);
                                    propertiesInstance.LastModifiedBy = lastModifiedByInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue2["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    SoftwareUpdateConfigurationProvisioningState provisioningStateInstance = ((SoftwareUpdateConfigurationProvisioningState)Enum.Parse(typeof(SoftwareUpdateConfigurationProvisioningState), ((string)provisioningStateValue), true));
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken creationTimeValue2 = propertiesValue2["creationTime"];
                                if (creationTimeValue2 != null && creationTimeValue2.Type != JTokenType.Null)
                                {
                                    DateTimeOffset creationTimeInstance2 = ((DateTimeOffset)creationTimeValue2);
                                    propertiesInstance.CreationTime = creationTimeInstance2;
                                }
                                
                                JToken lastModifiedTimeValue2 = propertiesValue2["lastModifiedTime"];
                                if (lastModifiedTimeValue2 != null && lastModifiedTimeValue2.Type != JTokenType.Null)
                                {
                                    DateTimeOffset lastModifiedTimeInstance2 = ((DateTimeOffset)lastModifiedTimeValue2);
                                    propertiesInstance.LastModifiedTime = lastModifiedTimeInstance2;
                                }
                                
                                JToken descriptionValue2 = propertiesValue2["description"];
                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                {
                                    string descriptionInstance2 = ((string)descriptionValue2);
                                    propertiesInstance.Description = descriptionInstance2;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Delete the softwareUpdateConfigurations.  (see
        /// http://aka.ms/azureautomationsdk/softwareUpdateConfigurationOperations
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='softwareUpdateConfigurationName'>
        /// Required. The name of softwareUpdateConfigurations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// A standard service response including an HTTP status code and
        /// request ID.
        /// </returns>
        public async Task<AzureOperationResponse> DeleteAsync(string resourceGroupName, string automationAccount, string softwareUpdateConfigurationName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (softwareUpdateConfigurationName == null)
            {
                throw new ArgumentNullException("softwareUpdateConfigurationName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("softwareUpdateConfigurationName", softwareUpdateConfigurationName);
                TracingAdapter.Enter(invocationId, this, "DeleteAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/softwareUpdateConfigurations/";
            url = url + Uri.EscapeDataString(softwareUpdateConfigurationName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2017-05-15-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Delete;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    AzureOperationResponse result = null;
                    // Deserialize Response
                    result = new AzureOperationResponse();
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve the updateDeployment identified by
        /// softwareUpdateConfigurations name.  (see
        /// http://aka.ms/azureautomationsdk/softwareUpdateConfigurationOperations
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='softwareUpdateConfigurationName'>
        /// Required. The name of softwareUpdateConfigurations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the get software update configuration
        /// operation.
        /// </returns>
        public async Task<SoftwareUpdateConfigurationGetResponse> GetAsync(string resourceGroupName, string automationAccount, string softwareUpdateConfigurationName, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            if (softwareUpdateConfigurationName == null)
            {
                throw new ArgumentNullException("softwareUpdateConfigurationName");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                tracingParameters.Add("softwareUpdateConfigurationName", softwareUpdateConfigurationName);
                TracingAdapter.Enter(invocationId, this, "GetAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/softwareUpdateConfigurations/";
            url = url + Uri.EscapeDataString(softwareUpdateConfigurationName);
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2017-05-15-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SoftwareUpdateConfigurationGetResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SoftwareUpdateConfigurationGetResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            SoftwareUpdateConfiguration softwareUpdateConfigurationInstance = new SoftwareUpdateConfiguration();
                            result.SoftwareUpdateConfiguration = softwareUpdateConfigurationInstance;
                            
                            JToken idValue = responseDoc["id"];
                            if (idValue != null && idValue.Type != JTokenType.Null)
                            {
                                string idInstance = ((string)idValue);
                                softwareUpdateConfigurationInstance.Id = idInstance;
                            }
                            
                            JToken nameValue = responseDoc["name"];
                            if (nameValue != null && nameValue.Type != JTokenType.Null)
                            {
                                string nameInstance = ((string)nameValue);
                                softwareUpdateConfigurationInstance.Name = nameInstance;
                            }
                            
                            JToken propertiesValue = responseDoc["properties"];
                            if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                            {
                                SoftwareUpdateConfigurationProperties propertiesInstance = new SoftwareUpdateConfigurationProperties();
                                softwareUpdateConfigurationInstance.Properties = propertiesInstance;
                                
                                JToken scheduleInfoValue = propertiesValue["scheduleInfo"];
                                if (scheduleInfoValue != null && scheduleInfoValue.Type != JTokenType.Null)
                                {
                                    ScheduleProperties scheduleInfoInstance = new ScheduleProperties();
                                    propertiesInstance.ScheduleProperties = scheduleInfoInstance;
                                    
                                    JToken startTimeValue = scheduleInfoValue["startTime"];
                                    if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                        scheduleInfoInstance.StartTime = startTimeInstance;
                                    }
                                    
                                    JToken startTimeOffsetMinutesValue = scheduleInfoValue["startTimeOffsetMinutes"];
                                    if (startTimeOffsetMinutesValue != null && startTimeOffsetMinutesValue.Type != JTokenType.Null)
                                    {
                                        double startTimeOffsetMinutesInstance = ((double)startTimeOffsetMinutesValue);
                                        scheduleInfoInstance.StartTimeOffsetMinutes = startTimeOffsetMinutesInstance;
                                    }
                                    
                                    JToken expiryTimeValue = scheduleInfoValue["expiryTime"];
                                    if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset expiryTimeInstance = ((DateTimeOffset)expiryTimeValue);
                                        scheduleInfoInstance.ExpiryTime = expiryTimeInstance;
                                    }
                                    
                                    JToken expiryTimeOffsetMinutesValue = scheduleInfoValue["expiryTimeOffsetMinutes"];
                                    if (expiryTimeOffsetMinutesValue != null && expiryTimeOffsetMinutesValue.Type != JTokenType.Null)
                                    {
                                        double expiryTimeOffsetMinutesInstance = ((double)expiryTimeOffsetMinutesValue);
                                        scheduleInfoInstance.ExpiryTimeOffsetMinutes = expiryTimeOffsetMinutesInstance;
                                    }
                                    
                                    JToken isEnabledValue = scheduleInfoValue["isEnabled"];
                                    if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                    {
                                        bool isEnabledInstance = ((bool)isEnabledValue);
                                        scheduleInfoInstance.IsEnabled = isEnabledInstance;
                                    }
                                    
                                    JToken nextRunValue = scheduleInfoValue["nextRun"];
                                    if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset nextRunInstance = ((DateTimeOffset)nextRunValue);
                                        scheduleInfoInstance.NextRun = nextRunInstance;
                                    }
                                    
                                    JToken nextRunOffsetMinutesValue = scheduleInfoValue["nextRunOffsetMinutes"];
                                    if (nextRunOffsetMinutesValue != null && nextRunOffsetMinutesValue.Type != JTokenType.Null)
                                    {
                                        double nextRunOffsetMinutesInstance = ((double)nextRunOffsetMinutesValue);
                                        scheduleInfoInstance.NextRunOffsetMinutes = nextRunOffsetMinutesInstance;
                                    }
                                    
                                    JToken intervalValue = scheduleInfoValue["interval"];
                                    if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                    {
                                        byte intervalInstance = ((byte)intervalValue);
                                        scheduleInfoInstance.Interval = intervalInstance;
                                    }
                                    
                                    JToken frequencyValue = scheduleInfoValue["frequency"];
                                    if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                    {
                                        string frequencyInstance = ((string)frequencyValue);
                                        scheduleInfoInstance.Frequency = frequencyInstance;
                                    }
                                    
                                    JToken timeZoneValue = scheduleInfoValue["timeZone"];
                                    if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                    {
                                        string timeZoneInstance = ((string)timeZoneValue);
                                        scheduleInfoInstance.TimeZone = timeZoneInstance;
                                    }
                                    
                                    JToken advancedScheduleValue = scheduleInfoValue["advancedSchedule"];
                                    if (advancedScheduleValue != null && advancedScheduleValue.Type != JTokenType.Null)
                                    {
                                        AdvancedSchedule advancedScheduleInstance = new AdvancedSchedule();
                                        scheduleInfoInstance.AdvancedSchedule = advancedScheduleInstance;
                                        
                                        JToken weekDaysArray = advancedScheduleValue["weekDays"];
                                        if (weekDaysArray != null && weekDaysArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken weekDaysValue in ((JArray)weekDaysArray))
                                            {
                                                advancedScheduleInstance.WeekDays.Add(((string)weekDaysValue));
                                            }
                                        }
                                        
                                        JToken monthDaysArray = advancedScheduleValue["monthDays"];
                                        if (monthDaysArray != null && monthDaysArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken monthDaysValue in ((JArray)monthDaysArray))
                                            {
                                                advancedScheduleInstance.MonthDays.Add(((int)monthDaysValue));
                                            }
                                        }
                                        
                                        JToken monthlyOccurrencesArray = advancedScheduleValue["monthlyOccurrences"];
                                        if (monthlyOccurrencesArray != null && monthlyOccurrencesArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken monthlyOccurrencesValue in ((JArray)monthlyOccurrencesArray))
                                            {
                                                AdvancedScheduleMonthlyOccurrence advancedScheduleMonthlyOccurrenceInstance = new AdvancedScheduleMonthlyOccurrence();
                                                advancedScheduleInstance.MonthlyOccurrences.Add(advancedScheduleMonthlyOccurrenceInstance);
                                                
                                                JToken occurrenceValue = monthlyOccurrencesValue["occurrence"];
                                                if (occurrenceValue != null && occurrenceValue.Type != JTokenType.Null)
                                                {
                                                    int occurrenceInstance = ((int)occurrenceValue);
                                                    advancedScheduleMonthlyOccurrenceInstance.Occurrence = occurrenceInstance;
                                                }
                                                
                                                JToken dayValue = monthlyOccurrencesValue["day"];
                                                if (dayValue != null && dayValue.Type != JTokenType.Null)
                                                {
                                                    string dayInstance = ((string)dayValue);
                                                    advancedScheduleMonthlyOccurrenceInstance.Day = dayInstance;
                                                }
                                            }
                                        }
                                    }
                                    
                                    JToken creationTimeValue = scheduleInfoValue["creationTime"];
                                    if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                        scheduleInfoInstance.CreationTime = creationTimeInstance;
                                    }
                                    
                                    JToken lastModifiedTimeValue = scheduleInfoValue["lastModifiedTime"];
                                    if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                    {
                                        DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                        scheduleInfoInstance.LastModifiedTime = lastModifiedTimeInstance;
                                    }
                                    
                                    JToken descriptionValue = scheduleInfoValue["description"];
                                    if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                    {
                                        string descriptionInstance = ((string)descriptionValue);
                                        scheduleInfoInstance.Description = descriptionInstance;
                                    }
                                }
                                
                                JToken updateConfigurationValue = propertiesValue["updateConfiguration"];
                                if (updateConfigurationValue != null && updateConfigurationValue.Type != JTokenType.Null)
                                {
                                    UpdateConfiguration updateConfigurationInstance = new UpdateConfiguration();
                                    propertiesInstance.UpdateConfiguration = updateConfigurationInstance;
                                    
                                    JToken operatingSystemValue = updateConfigurationValue["operatingSystem"];
                                    if (operatingSystemValue != null && operatingSystemValue.Type != JTokenType.Null)
                                    {
                                        string operatingSystemInstance = ((string)operatingSystemValue);
                                        updateConfigurationInstance.OperatingSystem = operatingSystemInstance;
                                    }
                                    
                                    JToken durationValue = updateConfigurationValue["duration"];
                                    if (durationValue != null && durationValue.Type != JTokenType.Null)
                                    {
                                        TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                        updateConfigurationInstance.Duration = durationInstance;
                                    }
                                    
                                    JToken azureVirtualMachinesArray = updateConfigurationValue["azureVirtualMachines"];
                                    if (azureVirtualMachinesArray != null && azureVirtualMachinesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken azureVirtualMachinesValue in ((JArray)azureVirtualMachinesArray))
                                        {
                                            updateConfigurationInstance.AzureVirtualMachines.Add(((string)azureVirtualMachinesValue));
                                        }
                                    }
                                    
                                    JToken nonAzureComputerNamesArray = updateConfigurationValue["nonAzureComputerNames"];
                                    if (nonAzureComputerNamesArray != null && nonAzureComputerNamesArray.Type != JTokenType.Null)
                                    {
                                        foreach (JToken nonAzureComputerNamesValue in ((JArray)nonAzureComputerNamesArray))
                                        {
                                            updateConfigurationInstance.NonAzureComputerNames.Add(((string)nonAzureComputerNamesValue));
                                        }
                                    }
                                    
                                    JToken windowsValue = updateConfigurationValue["windows"];
                                    if (windowsValue != null && windowsValue.Type != JTokenType.Null)
                                    {
                                        WindowsConfiguration windowsInstance = new WindowsConfiguration();
                                        updateConfigurationInstance.Windows = windowsInstance;
                                        
                                        JToken includedUpdateClassificationsValue = windowsValue["includedUpdateClassifications"];
                                        if (includedUpdateClassificationsValue != null && includedUpdateClassificationsValue.Type != JTokenType.Null)
                                        {
                                            string includedUpdateClassificationsInstance = ((string)includedUpdateClassificationsValue);
                                            windowsInstance.IncludedUpdateClassifications = includedUpdateClassificationsInstance;
                                        }
                                        
                                        JToken excludedKbNumbersArray = windowsValue["excludedKbNumbers"];
                                        if (excludedKbNumbersArray != null && excludedKbNumbersArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken excludedKbNumbersValue in ((JArray)excludedKbNumbersArray))
                                            {
                                                windowsInstance.ExcludedKbNumbers.Add(((string)excludedKbNumbersValue));
                                            }
                                        }
                                    }
                                    
                                    JToken linuxValue = updateConfigurationValue["linux"];
                                    if (linuxValue != null && linuxValue.Type != JTokenType.Null)
                                    {
                                        LinuxConfiguration linuxInstance = new LinuxConfiguration();
                                        updateConfigurationInstance.Linux = linuxInstance;
                                        
                                        JToken includedPackageClassificationsValue = linuxValue["includedPackageClassifications"];
                                        if (includedPackageClassificationsValue != null && includedPackageClassificationsValue.Type != JTokenType.Null)
                                        {
                                            string includedPackageClassificationsInstance = ((string)includedPackageClassificationsValue);
                                            linuxInstance.IncludedPackageClassifications = includedPackageClassificationsInstance;
                                        }
                                        
                                        JToken excludedPackageNameMasksArray = linuxValue["excludedPackageNameMasks"];
                                        if (excludedPackageNameMasksArray != null && excludedPackageNameMasksArray.Type != JTokenType.Null)
                                        {
                                            foreach (JToken excludedPackageNameMasksValue in ((JArray)excludedPackageNameMasksArray))
                                            {
                                                linuxInstance.ExcludedPackageNameMasks.Add(((string)excludedPackageNameMasksValue));
                                            }
                                        }
                                    }
                                }
                                
                                JToken lastModifiedByValue = propertiesValue["lastModifiedBy"];
                                if (lastModifiedByValue != null && lastModifiedByValue.Type != JTokenType.Null)
                                {
                                    string lastModifiedByInstance = ((string)lastModifiedByValue);
                                    propertiesInstance.LastModifiedBy = lastModifiedByInstance;
                                }
                                
                                JToken provisioningStateValue = propertiesValue["provisioningState"];
                                if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                {
                                    SoftwareUpdateConfigurationProvisioningState provisioningStateInstance = ((SoftwareUpdateConfigurationProvisioningState)Enum.Parse(typeof(SoftwareUpdateConfigurationProvisioningState), ((string)provisioningStateValue), true));
                                    propertiesInstance.ProvisioningState = provisioningStateInstance;
                                }
                                
                                JToken creationTimeValue2 = propertiesValue["creationTime"];
                                if (creationTimeValue2 != null && creationTimeValue2.Type != JTokenType.Null)
                                {
                                    DateTimeOffset creationTimeInstance2 = ((DateTimeOffset)creationTimeValue2);
                                    propertiesInstance.CreationTime = creationTimeInstance2;
                                }
                                
                                JToken lastModifiedTimeValue2 = propertiesValue["lastModifiedTime"];
                                if (lastModifiedTimeValue2 != null && lastModifiedTimeValue2.Type != JTokenType.Null)
                                {
                                    DateTimeOffset lastModifiedTimeInstance2 = ((DateTimeOffset)lastModifiedTimeValue2);
                                    propertiesInstance.LastModifiedTime = lastModifiedTimeInstance2;
                                }
                                
                                JToken descriptionValue2 = propertiesValue["description"];
                                if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                {
                                    string descriptionInstance2 = ((string)descriptionValue2);
                                    propertiesInstance.Description = descriptionInstance2;
                                }
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve a list of softwareUpdateConfigurations.  (see
        /// http://aka.ms/azureautomationsdk/softwareUpdateConfigurationOperations
        /// for more information)
        /// </summary>
        /// <param name='resourceGroupName'>
        /// Required. The name of the resource group
        /// </param>
        /// <param name='automationAccount'>
        /// Required. The automation account name.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list software update configuration
        /// operation.
        /// </returns>
        public async Task<SoftwareUpdateConfigurationListResponse> ListAsync(string resourceGroupName, string automationAccount, CancellationToken cancellationToken)
        {
            // Validate
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException("resourceGroupName");
            }
            if (automationAccount == null)
            {
                throw new ArgumentNullException("automationAccount");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("resourceGroupName", resourceGroupName);
                tracingParameters.Add("automationAccount", automationAccount);
                TracingAdapter.Enter(invocationId, this, "ListAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + "/subscriptions/";
            if (this.Client.Credentials.SubscriptionId != null)
            {
                url = url + Uri.EscapeDataString(this.Client.Credentials.SubscriptionId);
            }
            url = url + "/resourceGroups/";
            url = url + Uri.EscapeDataString(resourceGroupName);
            url = url + "/providers/";
            if (this.Client.ResourceNamespace != null)
            {
                url = url + Uri.EscapeDataString(this.Client.ResourceNamespace);
            }
            url = url + "/automationAccounts/";
            url = url + Uri.EscapeDataString(automationAccount);
            url = url + "/softwareUpdateConfigurations";
            List<string> queryParameters = new List<string>();
            queryParameters.Add("api-version=2017-05-15-preview");
            if (queryParameters.Count > 0)
            {
                url = url + "?" + string.Join("&", queryParameters);
            }
            string baseUrl = this.Client.BaseUri.AbsoluteUri;
            // Trim '/' character from the end of baseUrl and beginning of url.
            if (baseUrl[baseUrl.Length - 1] == '/')
            {
                baseUrl = baseUrl.Substring(0, baseUrl.Length - 1);
            }
            if (url[0] == '/')
            {
                url = url.Substring(1);
            }
            url = baseUrl + "/" + url;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("ocp-referer", url);
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SoftwareUpdateConfigurationListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SoftwareUpdateConfigurationListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    SoftwareUpdateConfiguration softwareUpdateConfigurationInstance = new SoftwareUpdateConfiguration();
                                    result.SoftwareUpdateConfigurations.Add(softwareUpdateConfigurationInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        softwareUpdateConfigurationInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        softwareUpdateConfigurationInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        SoftwareUpdateConfigurationProperties propertiesInstance = new SoftwareUpdateConfigurationProperties();
                                        softwareUpdateConfigurationInstance.Properties = propertiesInstance;
                                        
                                        JToken scheduleInfoValue = propertiesValue["scheduleInfo"];
                                        if (scheduleInfoValue != null && scheduleInfoValue.Type != JTokenType.Null)
                                        {
                                            ScheduleProperties scheduleInfoInstance = new ScheduleProperties();
                                            propertiesInstance.ScheduleProperties = scheduleInfoInstance;
                                            
                                            JToken startTimeValue = scheduleInfoValue["startTime"];
                                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                                scheduleInfoInstance.StartTime = startTimeInstance;
                                            }
                                            
                                            JToken startTimeOffsetMinutesValue = scheduleInfoValue["startTimeOffsetMinutes"];
                                            if (startTimeOffsetMinutesValue != null && startTimeOffsetMinutesValue.Type != JTokenType.Null)
                                            {
                                                double startTimeOffsetMinutesInstance = ((double)startTimeOffsetMinutesValue);
                                                scheduleInfoInstance.StartTimeOffsetMinutes = startTimeOffsetMinutesInstance;
                                            }
                                            
                                            JToken expiryTimeValue = scheduleInfoValue["expiryTime"];
                                            if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset expiryTimeInstance = ((DateTimeOffset)expiryTimeValue);
                                                scheduleInfoInstance.ExpiryTime = expiryTimeInstance;
                                            }
                                            
                                            JToken expiryTimeOffsetMinutesValue = scheduleInfoValue["expiryTimeOffsetMinutes"];
                                            if (expiryTimeOffsetMinutesValue != null && expiryTimeOffsetMinutesValue.Type != JTokenType.Null)
                                            {
                                                double expiryTimeOffsetMinutesInstance = ((double)expiryTimeOffsetMinutesValue);
                                                scheduleInfoInstance.ExpiryTimeOffsetMinutes = expiryTimeOffsetMinutesInstance;
                                            }
                                            
                                            JToken isEnabledValue = scheduleInfoValue["isEnabled"];
                                            if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                            {
                                                bool isEnabledInstance = ((bool)isEnabledValue);
                                                scheduleInfoInstance.IsEnabled = isEnabledInstance;
                                            }
                                            
                                            JToken nextRunValue = scheduleInfoValue["nextRun"];
                                            if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset nextRunInstance = ((DateTimeOffset)nextRunValue);
                                                scheduleInfoInstance.NextRun = nextRunInstance;
                                            }
                                            
                                            JToken nextRunOffsetMinutesValue = scheduleInfoValue["nextRunOffsetMinutes"];
                                            if (nextRunOffsetMinutesValue != null && nextRunOffsetMinutesValue.Type != JTokenType.Null)
                                            {
                                                double nextRunOffsetMinutesInstance = ((double)nextRunOffsetMinutesValue);
                                                scheduleInfoInstance.NextRunOffsetMinutes = nextRunOffsetMinutesInstance;
                                            }
                                            
                                            JToken intervalValue = scheduleInfoValue["interval"];
                                            if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                            {
                                                byte intervalInstance = ((byte)intervalValue);
                                                scheduleInfoInstance.Interval = intervalInstance;
                                            }
                                            
                                            JToken frequencyValue = scheduleInfoValue["frequency"];
                                            if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                            {
                                                string frequencyInstance = ((string)frequencyValue);
                                                scheduleInfoInstance.Frequency = frequencyInstance;
                                            }
                                            
                                            JToken timeZoneValue = scheduleInfoValue["timeZone"];
                                            if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                            {
                                                string timeZoneInstance = ((string)timeZoneValue);
                                                scheduleInfoInstance.TimeZone = timeZoneInstance;
                                            }
                                            
                                            JToken advancedScheduleValue = scheduleInfoValue["advancedSchedule"];
                                            if (advancedScheduleValue != null && advancedScheduleValue.Type != JTokenType.Null)
                                            {
                                                AdvancedSchedule advancedScheduleInstance = new AdvancedSchedule();
                                                scheduleInfoInstance.AdvancedSchedule = advancedScheduleInstance;
                                                
                                                JToken weekDaysArray = advancedScheduleValue["weekDays"];
                                                if (weekDaysArray != null && weekDaysArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken weekDaysValue in ((JArray)weekDaysArray))
                                                    {
                                                        advancedScheduleInstance.WeekDays.Add(((string)weekDaysValue));
                                                    }
                                                }
                                                
                                                JToken monthDaysArray = advancedScheduleValue["monthDays"];
                                                if (monthDaysArray != null && monthDaysArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken monthDaysValue in ((JArray)monthDaysArray))
                                                    {
                                                        advancedScheduleInstance.MonthDays.Add(((int)monthDaysValue));
                                                    }
                                                }
                                                
                                                JToken monthlyOccurrencesArray = advancedScheduleValue["monthlyOccurrences"];
                                                if (monthlyOccurrencesArray != null && monthlyOccurrencesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken monthlyOccurrencesValue in ((JArray)monthlyOccurrencesArray))
                                                    {
                                                        AdvancedScheduleMonthlyOccurrence advancedScheduleMonthlyOccurrenceInstance = new AdvancedScheduleMonthlyOccurrence();
                                                        advancedScheduleInstance.MonthlyOccurrences.Add(advancedScheduleMonthlyOccurrenceInstance);
                                                        
                                                        JToken occurrenceValue = monthlyOccurrencesValue["occurrence"];
                                                        if (occurrenceValue != null && occurrenceValue.Type != JTokenType.Null)
                                                        {
                                                            int occurrenceInstance = ((int)occurrenceValue);
                                                            advancedScheduleMonthlyOccurrenceInstance.Occurrence = occurrenceInstance;
                                                        }
                                                        
                                                        JToken dayValue = monthlyOccurrencesValue["day"];
                                                        if (dayValue != null && dayValue.Type != JTokenType.Null)
                                                        {
                                                            string dayInstance = ((string)dayValue);
                                                            advancedScheduleMonthlyOccurrenceInstance.Day = dayInstance;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken creationTimeValue = scheduleInfoValue["creationTime"];
                                            if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                                scheduleInfoInstance.CreationTime = creationTimeInstance;
                                            }
                                            
                                            JToken lastModifiedTimeValue = scheduleInfoValue["lastModifiedTime"];
                                            if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                                scheduleInfoInstance.LastModifiedTime = lastModifiedTimeInstance;
                                            }
                                            
                                            JToken descriptionValue = scheduleInfoValue["description"];
                                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance = ((string)descriptionValue);
                                                scheduleInfoInstance.Description = descriptionInstance;
                                            }
                                        }
                                        
                                        JToken updateConfigurationValue = propertiesValue["updateConfiguration"];
                                        if (updateConfigurationValue != null && updateConfigurationValue.Type != JTokenType.Null)
                                        {
                                            UpdateConfiguration updateConfigurationInstance = new UpdateConfiguration();
                                            propertiesInstance.UpdateConfiguration = updateConfigurationInstance;
                                            
                                            JToken operatingSystemValue = updateConfigurationValue["operatingSystem"];
                                            if (operatingSystemValue != null && operatingSystemValue.Type != JTokenType.Null)
                                            {
                                                string operatingSystemInstance = ((string)operatingSystemValue);
                                                updateConfigurationInstance.OperatingSystem = operatingSystemInstance;
                                            }
                                            
                                            JToken durationValue = updateConfigurationValue["duration"];
                                            if (durationValue != null && durationValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                                updateConfigurationInstance.Duration = durationInstance;
                                            }
                                            
                                            JToken azureVirtualMachinesArray = updateConfigurationValue["azureVirtualMachines"];
                                            if (azureVirtualMachinesArray != null && azureVirtualMachinesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken azureVirtualMachinesValue in ((JArray)azureVirtualMachinesArray))
                                                {
                                                    updateConfigurationInstance.AzureVirtualMachines.Add(((string)azureVirtualMachinesValue));
                                                }
                                            }
                                            
                                            JToken nonAzureComputerNamesArray = updateConfigurationValue["nonAzureComputerNames"];
                                            if (nonAzureComputerNamesArray != null && nonAzureComputerNamesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken nonAzureComputerNamesValue in ((JArray)nonAzureComputerNamesArray))
                                                {
                                                    updateConfigurationInstance.NonAzureComputerNames.Add(((string)nonAzureComputerNamesValue));
                                                }
                                            }
                                            
                                            JToken windowsValue = updateConfigurationValue["windows"];
                                            if (windowsValue != null && windowsValue.Type != JTokenType.Null)
                                            {
                                                WindowsConfiguration windowsInstance = new WindowsConfiguration();
                                                updateConfigurationInstance.Windows = windowsInstance;
                                                
                                                JToken includedUpdateClassificationsValue = windowsValue["includedUpdateClassifications"];
                                                if (includedUpdateClassificationsValue != null && includedUpdateClassificationsValue.Type != JTokenType.Null)
                                                {
                                                    string includedUpdateClassificationsInstance = ((string)includedUpdateClassificationsValue);
                                                    windowsInstance.IncludedUpdateClassifications = includedUpdateClassificationsInstance;
                                                }
                                                
                                                JToken excludedKbNumbersArray = windowsValue["excludedKbNumbers"];
                                                if (excludedKbNumbersArray != null && excludedKbNumbersArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken excludedKbNumbersValue in ((JArray)excludedKbNumbersArray))
                                                    {
                                                        windowsInstance.ExcludedKbNumbers.Add(((string)excludedKbNumbersValue));
                                                    }
                                                }
                                            }
                                            
                                            JToken linuxValue = updateConfigurationValue["linux"];
                                            if (linuxValue != null && linuxValue.Type != JTokenType.Null)
                                            {
                                                LinuxConfiguration linuxInstance = new LinuxConfiguration();
                                                updateConfigurationInstance.Linux = linuxInstance;
                                                
                                                JToken includedPackageClassificationsValue = linuxValue["includedPackageClassifications"];
                                                if (includedPackageClassificationsValue != null && includedPackageClassificationsValue.Type != JTokenType.Null)
                                                {
                                                    string includedPackageClassificationsInstance = ((string)includedPackageClassificationsValue);
                                                    linuxInstance.IncludedPackageClassifications = includedPackageClassificationsInstance;
                                                }
                                                
                                                JToken excludedPackageNameMasksArray = linuxValue["excludedPackageNameMasks"];
                                                if (excludedPackageNameMasksArray != null && excludedPackageNameMasksArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken excludedPackageNameMasksValue in ((JArray)excludedPackageNameMasksArray))
                                                    {
                                                        linuxInstance.ExcludedPackageNameMasks.Add(((string)excludedPackageNameMasksValue));
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken lastModifiedByValue = propertiesValue["lastModifiedBy"];
                                        if (lastModifiedByValue != null && lastModifiedByValue.Type != JTokenType.Null)
                                        {
                                            string lastModifiedByInstance = ((string)lastModifiedByValue);
                                            propertiesInstance.LastModifiedBy = lastModifiedByInstance;
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            SoftwareUpdateConfigurationProvisioningState provisioningStateInstance = ((SoftwareUpdateConfigurationProvisioningState)Enum.Parse(typeof(SoftwareUpdateConfigurationProvisioningState), ((string)provisioningStateValue), true));
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken creationTimeValue2 = propertiesValue["creationTime"];
                                        if (creationTimeValue2 != null && creationTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset creationTimeInstance2 = ((DateTimeOffset)creationTimeValue2);
                                            propertiesInstance.CreationTime = creationTimeInstance2;
                                        }
                                        
                                        JToken lastModifiedTimeValue2 = propertiesValue["lastModifiedTime"];
                                        if (lastModifiedTimeValue2 != null && lastModifiedTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset lastModifiedTimeInstance2 = ((DateTimeOffset)lastModifiedTimeValue2);
                                            propertiesInstance.LastModifiedTime = lastModifiedTimeInstance2;
                                        }
                                        
                                        JToken descriptionValue2 = propertiesValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            propertiesInstance.Description = descriptionInstance2;
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                                result.SkipToken = odatanextLinkInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Retrieve next list of softwareUpdateConfigurations.  (see
        /// http://aka.ms/azureautomationsdk/softwareUpdateConfigurationOperations
        /// for more information)
        /// </summary>
        /// <param name='nextLink'>
        /// Required. The link to retrieve next set of items.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        /// <returns>
        /// The response model for the list software update configuration
        /// operation.
        /// </returns>
        public async Task<SoftwareUpdateConfigurationListResponse> ListNextAsync(string nextLink, CancellationToken cancellationToken)
        {
            // Validate
            if (nextLink == null)
            {
                throw new ArgumentNullException("nextLink");
            }
            
            // Tracing
            bool shouldTrace = TracingAdapter.IsEnabled;
            string invocationId = null;
            if (shouldTrace)
            {
                invocationId = TracingAdapter.NextInvocationId.ToString();
                Dictionary<string, object> tracingParameters = new Dictionary<string, object>();
                tracingParameters.Add("nextLink", nextLink);
                TracingAdapter.Enter(invocationId, this, "ListNextAsync", tracingParameters);
            }
            
            // Construct URL
            string url = "";
            url = url + nextLink;
            url = url.Replace(" ", "%20");
            
            // Create HTTP transport objects
            HttpRequestMessage httpRequest = null;
            try
            {
                httpRequest = new HttpRequestMessage();
                httpRequest.Method = HttpMethod.Get;
                httpRequest.RequestUri = new Uri(url);
                
                // Set Headers
                httpRequest.Headers.Add("Accept", "application/json");
                httpRequest.Headers.Add("ocp-referer", url);
                httpRequest.Headers.Add("x-ms-version", "2014-06-01");
                
                // Set Credentials
                cancellationToken.ThrowIfCancellationRequested();
                await this.Client.Credentials.ProcessHttpRequestAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                
                // Send Request
                HttpResponseMessage httpResponse = null;
                try
                {
                    if (shouldTrace)
                    {
                        TracingAdapter.SendRequest(invocationId, httpRequest);
                    }
                    cancellationToken.ThrowIfCancellationRequested();
                    httpResponse = await this.Client.HttpClient.SendAsync(httpRequest, cancellationToken).ConfigureAwait(false);
                    if (shouldTrace)
                    {
                        TracingAdapter.ReceiveResponse(invocationId, httpResponse);
                    }
                    HttpStatusCode statusCode = httpResponse.StatusCode;
                    if (statusCode != HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        CloudException ex = CloudException.Create(httpRequest, null, httpResponse, await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false));
                        if (shouldTrace)
                        {
                            TracingAdapter.Error(invocationId, ex);
                        }
                        throw ex;
                    }
                    
                    // Create Result
                    SoftwareUpdateConfigurationListResponse result = null;
                    // Deserialize Response
                    if (statusCode == HttpStatusCode.OK)
                    {
                        cancellationToken.ThrowIfCancellationRequested();
                        string responseContent = await httpResponse.Content.ReadAsStringAsync().ConfigureAwait(false);
                        result = new SoftwareUpdateConfigurationListResponse();
                        JToken responseDoc = null;
                        if (string.IsNullOrEmpty(responseContent) == false)
                        {
                            responseDoc = JToken.Parse(responseContent);
                        }
                        
                        if (responseDoc != null && responseDoc.Type != JTokenType.Null)
                        {
                            JToken valueArray = responseDoc["value"];
                            if (valueArray != null && valueArray.Type != JTokenType.Null)
                            {
                                foreach (JToken valueValue in ((JArray)valueArray))
                                {
                                    SoftwareUpdateConfiguration softwareUpdateConfigurationInstance = new SoftwareUpdateConfiguration();
                                    result.SoftwareUpdateConfigurations.Add(softwareUpdateConfigurationInstance);
                                    
                                    JToken idValue = valueValue["id"];
                                    if (idValue != null && idValue.Type != JTokenType.Null)
                                    {
                                        string idInstance = ((string)idValue);
                                        softwareUpdateConfigurationInstance.Id = idInstance;
                                    }
                                    
                                    JToken nameValue = valueValue["name"];
                                    if (nameValue != null && nameValue.Type != JTokenType.Null)
                                    {
                                        string nameInstance = ((string)nameValue);
                                        softwareUpdateConfigurationInstance.Name = nameInstance;
                                    }
                                    
                                    JToken propertiesValue = valueValue["properties"];
                                    if (propertiesValue != null && propertiesValue.Type != JTokenType.Null)
                                    {
                                        SoftwareUpdateConfigurationProperties propertiesInstance = new SoftwareUpdateConfigurationProperties();
                                        softwareUpdateConfigurationInstance.Properties = propertiesInstance;
                                        
                                        JToken scheduleInfoValue = propertiesValue["scheduleInfo"];
                                        if (scheduleInfoValue != null && scheduleInfoValue.Type != JTokenType.Null)
                                        {
                                            ScheduleProperties scheduleInfoInstance = new ScheduleProperties();
                                            propertiesInstance.ScheduleProperties = scheduleInfoInstance;
                                            
                                            JToken startTimeValue = scheduleInfoValue["startTime"];
                                            if (startTimeValue != null && startTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset startTimeInstance = ((DateTimeOffset)startTimeValue);
                                                scheduleInfoInstance.StartTime = startTimeInstance;
                                            }
                                            
                                            JToken startTimeOffsetMinutesValue = scheduleInfoValue["startTimeOffsetMinutes"];
                                            if (startTimeOffsetMinutesValue != null && startTimeOffsetMinutesValue.Type != JTokenType.Null)
                                            {
                                                double startTimeOffsetMinutesInstance = ((double)startTimeOffsetMinutesValue);
                                                scheduleInfoInstance.StartTimeOffsetMinutes = startTimeOffsetMinutesInstance;
                                            }
                                            
                                            JToken expiryTimeValue = scheduleInfoValue["expiryTime"];
                                            if (expiryTimeValue != null && expiryTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset expiryTimeInstance = ((DateTimeOffset)expiryTimeValue);
                                                scheduleInfoInstance.ExpiryTime = expiryTimeInstance;
                                            }
                                            
                                            JToken expiryTimeOffsetMinutesValue = scheduleInfoValue["expiryTimeOffsetMinutes"];
                                            if (expiryTimeOffsetMinutesValue != null && expiryTimeOffsetMinutesValue.Type != JTokenType.Null)
                                            {
                                                double expiryTimeOffsetMinutesInstance = ((double)expiryTimeOffsetMinutesValue);
                                                scheduleInfoInstance.ExpiryTimeOffsetMinutes = expiryTimeOffsetMinutesInstance;
                                            }
                                            
                                            JToken isEnabledValue = scheduleInfoValue["isEnabled"];
                                            if (isEnabledValue != null && isEnabledValue.Type != JTokenType.Null)
                                            {
                                                bool isEnabledInstance = ((bool)isEnabledValue);
                                                scheduleInfoInstance.IsEnabled = isEnabledInstance;
                                            }
                                            
                                            JToken nextRunValue = scheduleInfoValue["nextRun"];
                                            if (nextRunValue != null && nextRunValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset nextRunInstance = ((DateTimeOffset)nextRunValue);
                                                scheduleInfoInstance.NextRun = nextRunInstance;
                                            }
                                            
                                            JToken nextRunOffsetMinutesValue = scheduleInfoValue["nextRunOffsetMinutes"];
                                            if (nextRunOffsetMinutesValue != null && nextRunOffsetMinutesValue.Type != JTokenType.Null)
                                            {
                                                double nextRunOffsetMinutesInstance = ((double)nextRunOffsetMinutesValue);
                                                scheduleInfoInstance.NextRunOffsetMinutes = nextRunOffsetMinutesInstance;
                                            }
                                            
                                            JToken intervalValue = scheduleInfoValue["interval"];
                                            if (intervalValue != null && intervalValue.Type != JTokenType.Null)
                                            {
                                                byte intervalInstance = ((byte)intervalValue);
                                                scheduleInfoInstance.Interval = intervalInstance;
                                            }
                                            
                                            JToken frequencyValue = scheduleInfoValue["frequency"];
                                            if (frequencyValue != null && frequencyValue.Type != JTokenType.Null)
                                            {
                                                string frequencyInstance = ((string)frequencyValue);
                                                scheduleInfoInstance.Frequency = frequencyInstance;
                                            }
                                            
                                            JToken timeZoneValue = scheduleInfoValue["timeZone"];
                                            if (timeZoneValue != null && timeZoneValue.Type != JTokenType.Null)
                                            {
                                                string timeZoneInstance = ((string)timeZoneValue);
                                                scheduleInfoInstance.TimeZone = timeZoneInstance;
                                            }
                                            
                                            JToken advancedScheduleValue = scheduleInfoValue["advancedSchedule"];
                                            if (advancedScheduleValue != null && advancedScheduleValue.Type != JTokenType.Null)
                                            {
                                                AdvancedSchedule advancedScheduleInstance = new AdvancedSchedule();
                                                scheduleInfoInstance.AdvancedSchedule = advancedScheduleInstance;
                                                
                                                JToken weekDaysArray = advancedScheduleValue["weekDays"];
                                                if (weekDaysArray != null && weekDaysArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken weekDaysValue in ((JArray)weekDaysArray))
                                                    {
                                                        advancedScheduleInstance.WeekDays.Add(((string)weekDaysValue));
                                                    }
                                                }
                                                
                                                JToken monthDaysArray = advancedScheduleValue["monthDays"];
                                                if (monthDaysArray != null && monthDaysArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken monthDaysValue in ((JArray)monthDaysArray))
                                                    {
                                                        advancedScheduleInstance.MonthDays.Add(((int)monthDaysValue));
                                                    }
                                                }
                                                
                                                JToken monthlyOccurrencesArray = advancedScheduleValue["monthlyOccurrences"];
                                                if (monthlyOccurrencesArray != null && monthlyOccurrencesArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken monthlyOccurrencesValue in ((JArray)monthlyOccurrencesArray))
                                                    {
                                                        AdvancedScheduleMonthlyOccurrence advancedScheduleMonthlyOccurrenceInstance = new AdvancedScheduleMonthlyOccurrence();
                                                        advancedScheduleInstance.MonthlyOccurrences.Add(advancedScheduleMonthlyOccurrenceInstance);
                                                        
                                                        JToken occurrenceValue = monthlyOccurrencesValue["occurrence"];
                                                        if (occurrenceValue != null && occurrenceValue.Type != JTokenType.Null)
                                                        {
                                                            int occurrenceInstance = ((int)occurrenceValue);
                                                            advancedScheduleMonthlyOccurrenceInstance.Occurrence = occurrenceInstance;
                                                        }
                                                        
                                                        JToken dayValue = monthlyOccurrencesValue["day"];
                                                        if (dayValue != null && dayValue.Type != JTokenType.Null)
                                                        {
                                                            string dayInstance = ((string)dayValue);
                                                            advancedScheduleMonthlyOccurrenceInstance.Day = dayInstance;
                                                        }
                                                    }
                                                }
                                            }
                                            
                                            JToken creationTimeValue = scheduleInfoValue["creationTime"];
                                            if (creationTimeValue != null && creationTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset creationTimeInstance = ((DateTimeOffset)creationTimeValue);
                                                scheduleInfoInstance.CreationTime = creationTimeInstance;
                                            }
                                            
                                            JToken lastModifiedTimeValue = scheduleInfoValue["lastModifiedTime"];
                                            if (lastModifiedTimeValue != null && lastModifiedTimeValue.Type != JTokenType.Null)
                                            {
                                                DateTimeOffset lastModifiedTimeInstance = ((DateTimeOffset)lastModifiedTimeValue);
                                                scheduleInfoInstance.LastModifiedTime = lastModifiedTimeInstance;
                                            }
                                            
                                            JToken descriptionValue = scheduleInfoValue["description"];
                                            if (descriptionValue != null && descriptionValue.Type != JTokenType.Null)
                                            {
                                                string descriptionInstance = ((string)descriptionValue);
                                                scheduleInfoInstance.Description = descriptionInstance;
                                            }
                                        }
                                        
                                        JToken updateConfigurationValue = propertiesValue["updateConfiguration"];
                                        if (updateConfigurationValue != null && updateConfigurationValue.Type != JTokenType.Null)
                                        {
                                            UpdateConfiguration updateConfigurationInstance = new UpdateConfiguration();
                                            propertiesInstance.UpdateConfiguration = updateConfigurationInstance;
                                            
                                            JToken operatingSystemValue = updateConfigurationValue["operatingSystem"];
                                            if (operatingSystemValue != null && operatingSystemValue.Type != JTokenType.Null)
                                            {
                                                string operatingSystemInstance = ((string)operatingSystemValue);
                                                updateConfigurationInstance.OperatingSystem = operatingSystemInstance;
                                            }
                                            
                                            JToken durationValue = updateConfigurationValue["duration"];
                                            if (durationValue != null && durationValue.Type != JTokenType.Null)
                                            {
                                                TimeSpan durationInstance = XmlConvert.ToTimeSpan(((string)durationValue));
                                                updateConfigurationInstance.Duration = durationInstance;
                                            }
                                            
                                            JToken azureVirtualMachinesArray = updateConfigurationValue["azureVirtualMachines"];
                                            if (azureVirtualMachinesArray != null && azureVirtualMachinesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken azureVirtualMachinesValue in ((JArray)azureVirtualMachinesArray))
                                                {
                                                    updateConfigurationInstance.AzureVirtualMachines.Add(((string)azureVirtualMachinesValue));
                                                }
                                            }
                                            
                                            JToken nonAzureComputerNamesArray = updateConfigurationValue["nonAzureComputerNames"];
                                            if (nonAzureComputerNamesArray != null && nonAzureComputerNamesArray.Type != JTokenType.Null)
                                            {
                                                foreach (JToken nonAzureComputerNamesValue in ((JArray)nonAzureComputerNamesArray))
                                                {
                                                    updateConfigurationInstance.NonAzureComputerNames.Add(((string)nonAzureComputerNamesValue));
                                                }
                                            }
                                            
                                            JToken windowsValue = updateConfigurationValue["windows"];
                                            if (windowsValue != null && windowsValue.Type != JTokenType.Null)
                                            {
                                                WindowsConfiguration windowsInstance = new WindowsConfiguration();
                                                updateConfigurationInstance.Windows = windowsInstance;
                                                
                                                JToken includedUpdateClassificationsValue = windowsValue["includedUpdateClassifications"];
                                                if (includedUpdateClassificationsValue != null && includedUpdateClassificationsValue.Type != JTokenType.Null)
                                                {
                                                    string includedUpdateClassificationsInstance = ((string)includedUpdateClassificationsValue);
                                                    windowsInstance.IncludedUpdateClassifications = includedUpdateClassificationsInstance;
                                                }
                                                
                                                JToken excludedKbNumbersArray = windowsValue["excludedKbNumbers"];
                                                if (excludedKbNumbersArray != null && excludedKbNumbersArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken excludedKbNumbersValue in ((JArray)excludedKbNumbersArray))
                                                    {
                                                        windowsInstance.ExcludedKbNumbers.Add(((string)excludedKbNumbersValue));
                                                    }
                                                }
                                            }
                                            
                                            JToken linuxValue = updateConfigurationValue["linux"];
                                            if (linuxValue != null && linuxValue.Type != JTokenType.Null)
                                            {
                                                LinuxConfiguration linuxInstance = new LinuxConfiguration();
                                                updateConfigurationInstance.Linux = linuxInstance;
                                                
                                                JToken includedPackageClassificationsValue = linuxValue["includedPackageClassifications"];
                                                if (includedPackageClassificationsValue != null && includedPackageClassificationsValue.Type != JTokenType.Null)
                                                {
                                                    string includedPackageClassificationsInstance = ((string)includedPackageClassificationsValue);
                                                    linuxInstance.IncludedPackageClassifications = includedPackageClassificationsInstance;
                                                }
                                                
                                                JToken excludedPackageNameMasksArray = linuxValue["excludedPackageNameMasks"];
                                                if (excludedPackageNameMasksArray != null && excludedPackageNameMasksArray.Type != JTokenType.Null)
                                                {
                                                    foreach (JToken excludedPackageNameMasksValue in ((JArray)excludedPackageNameMasksArray))
                                                    {
                                                        linuxInstance.ExcludedPackageNameMasks.Add(((string)excludedPackageNameMasksValue));
                                                    }
                                                }
                                            }
                                        }
                                        
                                        JToken lastModifiedByValue = propertiesValue["lastModifiedBy"];
                                        if (lastModifiedByValue != null && lastModifiedByValue.Type != JTokenType.Null)
                                        {
                                            string lastModifiedByInstance = ((string)lastModifiedByValue);
                                            propertiesInstance.LastModifiedBy = lastModifiedByInstance;
                                        }
                                        
                                        JToken provisioningStateValue = propertiesValue["provisioningState"];
                                        if (provisioningStateValue != null && provisioningStateValue.Type != JTokenType.Null)
                                        {
                                            SoftwareUpdateConfigurationProvisioningState provisioningStateInstance = ((SoftwareUpdateConfigurationProvisioningState)Enum.Parse(typeof(SoftwareUpdateConfigurationProvisioningState), ((string)provisioningStateValue), true));
                                            propertiesInstance.ProvisioningState = provisioningStateInstance;
                                        }
                                        
                                        JToken creationTimeValue2 = propertiesValue["creationTime"];
                                        if (creationTimeValue2 != null && creationTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset creationTimeInstance2 = ((DateTimeOffset)creationTimeValue2);
                                            propertiesInstance.CreationTime = creationTimeInstance2;
                                        }
                                        
                                        JToken lastModifiedTimeValue2 = propertiesValue["lastModifiedTime"];
                                        if (lastModifiedTimeValue2 != null && lastModifiedTimeValue2.Type != JTokenType.Null)
                                        {
                                            DateTimeOffset lastModifiedTimeInstance2 = ((DateTimeOffset)lastModifiedTimeValue2);
                                            propertiesInstance.LastModifiedTime = lastModifiedTimeInstance2;
                                        }
                                        
                                        JToken descriptionValue2 = propertiesValue["description"];
                                        if (descriptionValue2 != null && descriptionValue2.Type != JTokenType.Null)
                                        {
                                            string descriptionInstance2 = ((string)descriptionValue2);
                                            propertiesInstance.Description = descriptionInstance2;
                                        }
                                    }
                                }
                            }
                            
                            JToken odatanextLinkValue = responseDoc["odata.nextLink"];
                            if (odatanextLinkValue != null && odatanextLinkValue.Type != JTokenType.Null)
                            {
                                string odatanextLinkInstance = Regex.Match(((string)odatanextLinkValue), "^.*[&\\?]\\$skiptoken=([^&]*)(&.*)?").Groups[1].Value;
                                result.SkipToken = odatanextLinkInstance;
                            }
                            
                            JToken nextLinkValue = responseDoc["nextLink"];
                            if (nextLinkValue != null && nextLinkValue.Type != JTokenType.Null)
                            {
                                string nextLinkInstance = ((string)nextLinkValue);
                                result.NextLink = nextLinkInstance;
                            }
                        }
                        
                    }
                    result.StatusCode = statusCode;
                    if (httpResponse.Headers.Contains("x-ms-request-id"))
                    {
                        result.RequestId = httpResponse.Headers.GetValues("x-ms-request-id").FirstOrDefault();
                    }
                    
                    if (shouldTrace)
                    {
                        TracingAdapter.Exit(invocationId, result);
                    }
                    return result;
                }
                finally
                {
                    if (httpResponse != null)
                    {
                        httpResponse.Dispose();
                    }
                }
            }
            finally
            {
                if (httpRequest != null)
                {
                    httpRequest.Dispose();
                }
            }
        }
    }
}
